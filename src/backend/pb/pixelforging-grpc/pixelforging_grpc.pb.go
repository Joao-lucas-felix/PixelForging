// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/pixelforging.proto

package pixelforging_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PixelForging_ExtractPalette_FullMethodName = "/pixelforging_grpc.PixelForging/ExtractPalette"
)

// PixelForgingClient is the client API for PixelForging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PixelForgingClient interface {
	ExtractPalette(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExtractPaletteInput, ExtractPaletteOutput], error)
}

type pixelForgingClient struct {
	cc grpc.ClientConnInterface
}

func NewPixelForgingClient(cc grpc.ClientConnInterface) PixelForgingClient {
	return &pixelForgingClient{cc}
}

func (c *pixelForgingClient) ExtractPalette(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ExtractPaletteInput, ExtractPaletteOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PixelForging_ServiceDesc.Streams[0], PixelForging_ExtractPalette_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExtractPaletteInput, ExtractPaletteOutput]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PixelForging_ExtractPaletteClient = grpc.BidiStreamingClient[ExtractPaletteInput, ExtractPaletteOutput]

// PixelForgingServer is the server API for PixelForging service.
// All implementations must embed UnimplementedPixelForgingServer
// for forward compatibility.
type PixelForgingServer interface {
	ExtractPalette(grpc.BidiStreamingServer[ExtractPaletteInput, ExtractPaletteOutput]) error
	mustEmbedUnimplementedPixelForgingServer()
}

// UnimplementedPixelForgingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPixelForgingServer struct{}

func (UnimplementedPixelForgingServer) ExtractPalette(grpc.BidiStreamingServer[ExtractPaletteInput, ExtractPaletteOutput]) error {
	return status.Errorf(codes.Unimplemented, "method ExtractPalette not implemented")
}
func (UnimplementedPixelForgingServer) mustEmbedUnimplementedPixelForgingServer() {}
func (UnimplementedPixelForgingServer) testEmbeddedByValue()                      {}

// UnsafePixelForgingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PixelForgingServer will
// result in compilation errors.
type UnsafePixelForgingServer interface {
	mustEmbedUnimplementedPixelForgingServer()
}

func RegisterPixelForgingServer(s grpc.ServiceRegistrar, srv PixelForgingServer) {
	// If the following call pancis, it indicates UnimplementedPixelForgingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PixelForging_ServiceDesc, srv)
}

func _PixelForging_ExtractPalette_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PixelForgingServer).ExtractPalette(&grpc.GenericServerStream[ExtractPaletteInput, ExtractPaletteOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PixelForging_ExtractPaletteServer = grpc.BidiStreamingServer[ExtractPaletteInput, ExtractPaletteOutput]

// PixelForging_ServiceDesc is the grpc.ServiceDesc for PixelForging service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PixelForging_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pixelforging_grpc.PixelForging",
	HandlerType: (*PixelForgingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExtractPalette",
			Handler:       _PixelForging_ExtractPalette_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/pixelforging.proto",
}
